// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eStore.DL.Data;

namespace eStore.Migrations
{
    [DbContext(typeof(eStoreDbContext))]
    [Migration("20210129053321_Tailoring")]
    partial class Tailoring
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eStore.Shared.Models.AppInfo", b =>
                {
                    b.Property<int>("AppInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatabaseVersion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEffective")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("AppInfoId");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("eStore.Shared.Models.Banking.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankName")
                        .HasColumnType("TEXT");

                    b.HasKey("BankId");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankId = 1,
                            BankName = "State Bank of India"
                        },
                        new
                        {
                            BankId = 2,
                            BankName = "ICICI Bank"
                        },
                        new
                        {
                            BankId = 3,
                            BankName = "Bandhan Bank"
                        },
                        new
                        {
                            BankId = 4,
                            BankName = "Punjab National Bank"
                        },
                        new
                        {
                            BankId = 5,
                            BankName = "Bank of Baroda"
                        },
                        new
                        {
                            BankId = 6,
                            BankName = "Axis Bank"
                        },
                        new
                        {
                            BankId = 7,
                            BankName = "HDFC Bank"
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.PurchaseTaxType", b =>
                {
                    b.Property<int>("PurchaseTaxTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CompositeRate")
                        .HasColumnType("money");

                    b.Property<string>("TaxName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxType")
                        .HasColumnType("INTEGER");

                    b.HasKey("PurchaseTaxTypeId");

                    b.ToTable("PurchaseTaxTypes");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.SaleTaxType", b =>
                {
                    b.Property<int>("SaleTaxTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CompositeRate")
                        .HasColumnType("money");

                    b.Property<string>("TaxName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxType")
                        .HasColumnType("INTEGER");

                    b.HasKey("SaleTaxTypeId");

                    b.ToTable("SaleTaxTypes");

                    b.HasData(
                        new
                        {
                            SaleTaxTypeId = 1,
                            CompositeRate = 5m,
                            TaxName = "Local Output GST@ 5%  ",
                            TaxType = 0
                        },
                        new
                        {
                            SaleTaxTypeId = 2,
                            CompositeRate = 12m,
                            TaxName = "Local Output GST@ 12%  ",
                            TaxType = 0
                        },
                        new
                        {
                            SaleTaxTypeId = 3,
                            CompositeRate = 5m,
                            TaxName = "Output IGST@ 5%  ",
                            TaxType = 3
                        },
                        new
                        {
                            SaleTaxTypeId = 4,
                            CompositeRate = 12m,
                            TaxName = "Output IGST@ 12%  ",
                            TaxType = 3
                        },
                        new
                        {
                            SaleTaxTypeId = 5,
                            CompositeRate = 5m,
                            TaxName = "Output Vat@ 12%  ",
                            TaxType = 4
                        },
                        new
                        {
                            SaleTaxTypeId = 6,
                            CompositeRate = 12m,
                            TaxName = "Output VAT@ 5%  ",
                            TaxType = 4
                        },
                        new
                        {
                            SaleTaxTypeId = 7,
                            CompositeRate = 5m,
                            TaxName = "Output Vat Free  ",
                            TaxType = 4
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.TranscationMode", b =>
                {
                    b.Property<int>("TranscationModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Transcation")
                        .HasColumnType("TEXT");

                    b.HasKey("TranscationModeId");

                    b.HasIndex("Transcation")
                        .IsUnique();

                    b.ToTable("TranscationModes");

                    b.HasData(
                        new
                        {
                            TranscationModeId = 1,
                            Transcation = "Home Expenses"
                        },
                        new
                        {
                            TranscationModeId = 2,
                            Transcation = "Other Home Expenses"
                        },
                        new
                        {
                            TranscationModeId = 3,
                            Transcation = "Mukesh(Home Staff)"
                        },
                        new
                        {
                            TranscationModeId = 4,
                            Transcation = "Amit Kumar"
                        },
                        new
                        {
                            TranscationModeId = 5,
                            Transcation = "Amit Kumar Expenses"
                        },
                        new
                        {
                            TranscationModeId = 6,
                            Transcation = "CashIn"
                        },
                        new
                        {
                            TranscationModeId = 7,
                            Transcation = "CashOut"
                        },
                        new
                        {
                            TranscationModeId = 8,
                            Transcation = "Regular"
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Identity.RegisteredUser", b =>
                {
                    b.Property<int>("RegisteredUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsUserLoggedIn")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RegisteredUserId");

                    b.ToTable("RegisteredUsers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AttDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntryTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTailoring")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("AttendanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdharNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("EMail")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FatherName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HighestQualification")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTailors")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherIdDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("PanNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.EmployeeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeUsers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPersonPhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("WebSite")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Salesman", b =>
                {
                    b.Property<int>("SalesmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalesmanName")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("SalesmanId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Salesmen");

                    b.HasData(
                        new
                        {
                            SalesmanId = 1,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Sanjeev Mishra",
                            StoreId = 1
                        },
                        new
                        {
                            SalesmanId = 2,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Mukesh Mandal",
                            StoreId = 1
                        },
                        new
                        {
                            SalesmanId = 3,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Manager",
                            StoreId = 1
                        },
                        new
                        {
                            SalesmanId = 4,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Bikash Kumar Sah",
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GSTNO")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoOfEmployees")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PanNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoreCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreManagerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreManagerPhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Address = "Bhagalpur Road Dumka",
                            City = "Dumka",
                            EntryStatus = 0,
                            GSTNO = "20AJHPA739P1zv",
                            IsReadOnly = false,
                            NoOfEmployees = 9,
                            OpeningDate = new DateTime(2016, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PanNo = "AJHPA7396P",
                            PhoneNo = "06434-224461",
                            PinCode = "814101",
                            Status = true,
                            StoreCode = "JH0006",
                            StoreManagerName = "Alok Kumar",
                            StoreManagerPhoneNo = "",
                            StoreName = "Aprajita Retails"
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreClose", b =>
                {
                    b.Property<int>("StoreCloseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreCloseId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreCloses");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreHoliday", b =>
                {
                    b.Property<int>("StoreHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreHolidayId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreHolidays");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreOpen", b =>
                {
                    b.Property<int>("StoreOpenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OpenningTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreOpenId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreOpens");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringBooking", b =>
                {
                    b.Property<int>("TalioringBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingSlipNo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BundiPrice")
                        .HasColumnType("money");

                    b.Property<int>("BundiQty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CoatPrice")
                        .HasColumnType("money");

                    b.Property<int>("CoatQty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("KurtaPrice")
                        .HasColumnType("money");

                    b.Property<int>("KurtaQty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Others")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OthersPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("PantPrice")
                        .HasColumnType("money");

                    b.Property<int>("PantQty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ShirtPrice")
                        .HasColumnType("money");

                    b.Property<int>("ShirtQty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<int>("TotalQty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TalioringBookingId");

                    b.HasIndex("StoreId");

                    b.ToTable("TalioringBookings");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringDelivery", b =>
                {
                    b.Property<int>("TalioringDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InvNo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TalioringBookingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TalioringDeliveryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TalioringBookingId");

                    b.ToTable("TailoringDeliveries");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.FileInfo", b =>
                {
                    b.Property<Guid>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("TodoId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.ToDoMessage", b =>
                {
                    b.Property<int>("ToDoMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOver")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OverDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ToDoMessageId");

                    b.ToTable("ToDoMessages");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Added")
                        .HasColumnType("TEXT")
                        .HasColumnName("Added");

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Done")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("DueTo");

                    b.Property<Guid?>("FileTodoId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FileTodoId");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Attendance", b =>
                {
                    b.HasOne("eStore.Shared.Models.Payroll.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Employee", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.EmployeeUser", b =>
                {
                    b.HasOne("eStore.Shared.Models.Payroll.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("eStore.Shared.Models.Payroll.EmployeeUser", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Salesman", b =>
                {
                    b.HasOne("eStore.Shared.Models.Payroll.Employee", "Employee")
                        .WithMany("Salesmen")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Store", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Company", "Company")
                        .WithMany("Stores")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreClose", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreHoliday", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreOpen", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringBooking", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringDelivery", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Tailoring.TalioringBooking", "Booking")
                        .WithMany("Deliveries")
                        .HasForeignKey("TalioringBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.TodoItem", b =>
                {
                    b.HasOne("eStore.Shared.Models.Todos.FileInfo", "File")
                        .WithMany()
                        .HasForeignKey("FileTodoId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Salesmen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Company", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringBooking", b =>
                {
                    b.Navigation("Deliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
