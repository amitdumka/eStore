// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eStore.DL.Data;

namespace eStore.Migrations
{
    [DbContext(typeof(eStoreDbContext))]
    [Migration("20210203085850_initdb")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.CashPayment", b =>
                {
                    b.Property<int>("CashPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("PaidTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlipNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TranscationModeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CashPaymentId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TranscationModeId");

                    b.ToTable("CashPayments");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.CashReceipt", b =>
                {
                    b.Property<int>("CashReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("InwardDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlipNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TranscationModeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CashReceiptId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TranscationModeId");

                    b.ToTable("CashReceipts");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int?>("LedgerEnteryId")
                        .HasColumnType("int");

                    b.Property<int?>("LedgerEntryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("PartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayMode")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpenseId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LedgerEntryId");

                    b.HasIndex("PartyId");

                    b.HasIndex("StoreId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.EBillPayment", b =>
                {
                    b.Property<int>("EBillPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("EletricityBillId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsBillCleared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartialPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EBillPaymentId");

                    b.HasIndex("EletricityBillId");

                    b.HasIndex("StoreId");

                    b.ToTable("BillPayments");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.ElectricityConnection", b =>
                {
                    b.Property<int>("ElectricityConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConnectinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConnectioName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Connection")
                        .HasColumnType("int");

                    b.Property<string>("ConsumerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConusumerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DisconnectionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("KVLoad")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OwnedMetter")
                        .HasColumnType("bit");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SecurityDeposit")
                        .HasColumnType("money");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalConnectionCharges")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElectricityConnectionId");

                    b.HasIndex("StoreId");

                    b.ToTable("ElectricityConnections");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.EletricityBill", b =>
                {
                    b.Property<int>("EletricityBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("ArrearAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("money");

                    b.Property<double>("CurrentMeterReading")
                        .HasColumnType("float");

                    b.Property<int>("ElectricityConnectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MeterReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetDemand")
                        .HasColumnType("money");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<double>("TotalUnit")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EletricityBillId");

                    b.HasIndex("ElectricityConnectionId");

                    b.HasIndex("StoreId");

                    b.ToTable("EletricityBills");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentType")
                        .HasColumnType("int");

                    b.Property<int>("RentedLocationId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentId");

                    b.HasIndex("RentedLocationId");

                    b.HasIndex("StoreId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.RentedLocation", b =>
                {
                    b.Property<int>("RentedLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AdvanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RentType")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VacatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RentedLocationId");

                    b.HasIndex("StoreId");

                    b.ToTable("RentedLocations");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.LedgerEntry", b =>
                {
                    b.Property<int>("LedgerEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AmountIn")
                        .HasColumnType("money");

                    b.Property<decimal>("AmountOut")
                        .HasColumnType("money");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryType")
                        .HasColumnType("int");

                    b.Property<int>("LedgerEntryRefId")
                        .HasColumnType("int");

                    b.Property<string>("Particulars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("ReferanceId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherType")
                        .HasColumnType("int");

                    b.HasKey("LedgerEntryId");

                    b.HasIndex("PartyId");

                    b.ToTable("LedgerEntries");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.LedgerMaster", b =>
                {
                    b.Property<int>("LedgerMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LedgerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.HasKey("LedgerMasterId");

                    b.HasIndex("LedgerTypeId");

                    b.HasIndex("PartyId")
                        .IsUnique();

                    b.ToTable("LedgerMasters");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.LedgerType", b =>
                {
                    b.Property<int>("LedgerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("LedgerNameType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LedgerTypeId");

                    b.ToTable("LedgerTypes");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GSTNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LedgerTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("OpenningBalance")
                        .HasColumnType("money");

                    b.Property<DateTime>("OpenningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PANNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartyId");

                    b.HasIndex("LedgerTypeId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int?>("LedgerEnteryId")
                        .HasColumnType("int");

                    b.Property<int?>("LedgerEntryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("PartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayMode")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentSlipNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("LedgerEntryId");

                    b.HasIndex("PartyId");

                    b.HasIndex("StoreId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int?>("LedgerEnteryId")
                        .HasColumnType("int");

                    b.Property<int?>("LedgerEntryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("PartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayMode")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieptSlipNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReceiptId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("LedgerEntryId");

                    b.HasIndex("PartyId");

                    b.HasIndex("StoreId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("eStore.Shared.Models.AppInfo", b =>
                {
                    b.Property<int>("AppInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DatabaseVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEffective")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppInfoId");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("eStore.Shared.Models.Banking.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankId");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankId = 1,
                            BankName = "State Bank of India"
                        },
                        new
                        {
                            BankId = 2,
                            BankName = "ICICI Bank"
                        },
                        new
                        {
                            BankId = 3,
                            BankName = "Bandhan Bank"
                        },
                        new
                        {
                            BankId = 4,
                            BankName = "Punjab National Bank"
                        },
                        new
                        {
                            BankId = 5,
                            BankName = "Bank of Baroda"
                        },
                        new
                        {
                            BankId = 6,
                            BankName = "Axis Bank"
                        },
                        new
                        {
                            BankId = 7,
                            BankName = "HDFC Bank"
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Banking.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankAccountId");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("eStore.Shared.Models.Banking.BankTranscation", b =>
                {
                    b.Property<int>("BankTranscationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("InAmount")
                        .HasColumnType("money");

                    b.Property<string>("InNameOf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInHouse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutAmount")
                        .HasColumnType("money");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentModes")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankTranscationId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("StoreId");

                    b.ToTable("BankTranscation");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.CashDetail", b =>
                {
                    b.Property<int>("CashDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("C10")
                        .HasColumnType("int");

                    b.Property<int>("C100")
                        .HasColumnType("int");

                    b.Property<int>("C1000")
                        .HasColumnType("int");

                    b.Property<int>("C20")
                        .HasColumnType("int");

                    b.Property<int>("C2000")
                        .HasColumnType("int");

                    b.Property<int>("C5")
                        .HasColumnType("int");

                    b.Property<int>("C50")
                        .HasColumnType("int");

                    b.Property<int>("C500")
                        .HasColumnType("int");

                    b.Property<int>("Coin1")
                        .HasColumnType("int");

                    b.Property<int>("Coin10")
                        .HasColumnType("int");

                    b.Property<int>("Coin2")
                        .HasColumnType("int");

                    b.Property<int>("Coin5")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CashDetailId");

                    b.HasIndex("StoreId");

                    b.ToTable("CashDetail");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.CashInBank", b =>
                {
                    b.Property<int>("CashInBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CIBDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CashIn")
                        .HasColumnType("money");

                    b.Property<decimal>("CashOut")
                        .HasColumnType("money");

                    b.Property<decimal>("ClosingBalance")
                        .HasColumnType("money");

                    b.Property<decimal>("OpenningBalance")
                        .HasColumnType("money");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("CashInBankId");

                    b.HasIndex("StoreId");

                    b.ToTable("CashInBanks");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.CashInHand", b =>
                {
                    b.Property<int>("CashInHandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CIHDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CashIn")
                        .HasColumnType("money");

                    b.Property<decimal>("CashOut")
                        .HasColumnType("money");

                    b.Property<decimal>("ClosingBalance")
                        .HasColumnType("money");

                    b.Property<decimal>("OpenningBalance")
                        .HasColumnType("money");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("CashInHandId");

                    b.HasIndex("StoreId");

                    b.ToTable("CashInHands");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.PurchaseTaxType", b =>
                {
                    b.Property<int>("PurchaseTaxTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("CompositeRate")
                        .HasColumnType("money");

                    b.Property<string>("TaxName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxType")
                        .HasColumnType("int");

                    b.HasKey("PurchaseTaxTypeId");

                    b.ToTable("PurchaseTaxTypes");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.SaleTaxType", b =>
                {
                    b.Property<int>("SaleTaxTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("CompositeRate")
                        .HasColumnType("money");

                    b.Property<string>("TaxName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxType")
                        .HasColumnType("int");

                    b.HasKey("SaleTaxTypeId");

                    b.ToTable("SaleTaxTypes");

                    b.HasData(
                        new
                        {
                            SaleTaxTypeId = 1,
                            CompositeRate = 5m,
                            TaxName = "Local Output GST@ 5%  ",
                            TaxType = 0
                        },
                        new
                        {
                            SaleTaxTypeId = 2,
                            CompositeRate = 12m,
                            TaxName = "Local Output GST@ 12%  ",
                            TaxType = 0
                        },
                        new
                        {
                            SaleTaxTypeId = 3,
                            CompositeRate = 5m,
                            TaxName = "Output IGST@ 5%  ",
                            TaxType = 3
                        },
                        new
                        {
                            SaleTaxTypeId = 4,
                            CompositeRate = 12m,
                            TaxName = "Output IGST@ 12%  ",
                            TaxType = 3
                        },
                        new
                        {
                            SaleTaxTypeId = 5,
                            CompositeRate = 5m,
                            TaxName = "Output Vat@ 12%  ",
                            TaxType = 4
                        },
                        new
                        {
                            SaleTaxTypeId = 6,
                            CompositeRate = 12m,
                            TaxName = "Output VAT@ 5%  ",
                            TaxType = 4
                        },
                        new
                        {
                            SaleTaxTypeId = 7,
                            CompositeRate = 5m,
                            TaxName = "Output Vat Free  ",
                            TaxType = 4
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.TranscationMode", b =>
                {
                    b.Property<int>("TranscationModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Transcation")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TranscationModeId");

                    b.HasIndex("Transcation")
                        .IsUnique()
                        .HasFilter("[Transcation] IS NOT NULL");

                    b.ToTable("TranscationModes");

                    b.HasData(
                        new
                        {
                            TranscationModeId = 1,
                            Transcation = "Home Expenses"
                        },
                        new
                        {
                            TranscationModeId = 2,
                            Transcation = "Other Home Expenses"
                        },
                        new
                        {
                            TranscationModeId = 3,
                            Transcation = "Mukesh(Home Staff)"
                        },
                        new
                        {
                            TranscationModeId = 4,
                            Transcation = "Amit Kumar"
                        },
                        new
                        {
                            TranscationModeId = 5,
                            Transcation = "Amit Kumar Expenses"
                        },
                        new
                        {
                            TranscationModeId = 6,
                            Transcation = "CashIn"
                        },
                        new
                        {
                            TranscationModeId = 7,
                            Transcation = "CashOut"
                        },
                        new
                        {
                            TranscationModeId = 8,
                            Transcation = "Regular"
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Identity.RegisteredUser", b =>
                {
                    b.Property<int>("RegisteredUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUserLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegisteredUserId");

                    b.ToTable("RegisteredUsers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AttDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<string>("EntryTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTailoring")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttendanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdharNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighestQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTailors")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherIdDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.EmployeeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeUsers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimaryCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecondaryCategory")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.HSN", b =>
                {
                    b.Property<long>("HSNCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<decimal>("CESS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("HSNCode");

                    b.ToTable("HSN");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.ProductItem", b =>
                {
                    b.Property<int>("ProductItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("Categorys")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<string>("HSNCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MRP")
                        .HasColumnType("money");

                    b.Property<int?>("MainCategoryCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductTypeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("StyleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("money");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("ProductItemId");

                    b.HasIndex("BrandId");

                    b.HasIndex("MainCategoryCategoryId");

                    b.HasIndex("ProductCategoryCategoryId");

                    b.HasIndex("ProductTypeCategoryId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.ProductPurchase", b =>
                {
                    b.Property<int>("ProductPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("InWardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InWardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("money");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalBasicAmount")
                        .HasColumnType("money");

                    b.Property<double>("TotalQty")
                        .HasColumnType("float");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductPurchaseId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierID");

                    b.ToTable("ProductPurchase");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.PurchaseItem", b =>
                {
                    b.Property<int>("PurchaseItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<decimal>("CostValue")
                        .HasColumnType("money");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPurchaseId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseTaxTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<decimal>("TaxAmout")
                        .HasColumnType("money");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("PurchaseItemId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("ProductPurchaseId");

                    b.HasIndex("PurchaseTaxTypeId");

                    b.ToTable("PurchaseItem");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<double>("PurchaseQty")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("SaleQty")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SuppilerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Warehouse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.CardDetail", b =>
                {
                    b.Property<int>("CardDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("AuthCode")
                        .HasColumnType("int");

                    b.Property<int>("CardCode")
                        .HasColumnType("int");

                    b.Property<int>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LastDigit")
                        .HasColumnType("int");

                    b.HasKey("CardDetailId");

                    b.HasIndex("InvoiceNo")
                        .IsUnique()
                        .HasFilter("[InvoiceNo] IS NOT NULL");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.CouponPayment", b =>
                {
                    b.Property<int>("CouponPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("CouponNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailySaleId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CouponPaymentId");

                    b.HasIndex("DailySaleId")
                        .IsUnique();

                    b.ToTable("CouponPayments");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DailySale", b =>
                {
                    b.Property<int>("DailySaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("money");

                    b.Property<int?>("EDCTranscationId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<string>("InvNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManualBill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatchedWithVOy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleReturn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTailoringBill")
                        .HasColumnType("bit");

                    b.Property<int?>("MixAndCouponPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PayMode")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DailySaleId");

                    b.HasIndex("EDCTranscationId");

                    b.HasIndex("MixAndCouponPaymentId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("StoreId");

                    b.ToTable("DailySales");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DueRecoverd", b =>
                {
                    b.Property<int>("DueRecoverdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("money");

                    b.Property<int>("DuesListId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPartialPayment")
                        .HasColumnType("bit");

                    b.Property<int>("Modes")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DueRecoverdId");

                    b.HasIndex("DuesListId");

                    b.HasIndex("StoreId");

                    b.ToTable("DueRecoverds");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DuesList", b =>
                {
                    b.Property<int>("DuesListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("DailySaleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPartialRecovery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecovered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RecoveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DuesListId");

                    b.HasIndex("DailySaleId");

                    b.HasIndex("StoreId");

                    b.ToTable("DuesLists");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.EDC", b =>
                {
                    b.Property<int>("EDCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountNumberId")
                        .HasColumnType("int");

                    b.Property<string>("EDCName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<string>("MID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EDCId");

                    b.HasIndex("StoreId");

                    b.ToTable("CardMachine");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.EDCTranscation", b =>
                {
                    b.Property<int>("EDCTranscationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("CardEndingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardTypes")
                        .HasColumnType("int");

                    b.Property<int>("EDCId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EDCTranscationId");

                    b.HasIndex("EDCId");

                    b.HasIndex("StoreId");

                    b.ToTable("CardTranscations");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.MixAndCouponPayment", b =>
                {
                    b.Property<int>("MixAndCouponPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int?>("ModeMixAndCouponPaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MixAndCouponPaymentId");

                    b.HasIndex("ModeMixAndCouponPaymentId");

                    b.HasIndex("StoreId");

                    b.ToTable("MixPayments");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.OnlineSale", b =>
                {
                    b.Property<int>("OnlineSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<string>("InvNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("OnlineVendorId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProfitValue")
                        .HasColumnType("money");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VendorFee")
                        .HasColumnType("money");

                    b.Property<decimal>("VoyagerAmount")
                        .HasColumnType("money");

                    b.Property<string>("VoyagerInvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VoygerDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OnlineSaleId");

                    b.HasIndex("OnlineVendorId");

                    b.HasIndex("StoreId");

                    b.ToTable("OnlineSales");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.OnlineSaleReturn", b =>
                {
                    b.Property<int>("OnlineSaleReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<string>("InvNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecived")
                        .HasColumnType("bit");

                    b.Property<int>("OnlineSaleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VoyagerAmount")
                        .HasColumnType("money");

                    b.Property<string>("VoyagerInvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VoygerDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OnlineSaleReturnId");

                    b.HasIndex("OnlineSaleId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("OnlineSaleReturns");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.OnlineVendor", b =>
                {
                    b.Property<int>("OnlineVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OffDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OnlineVendorId");

                    b.ToTable("OnlineVendors");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.PaymentDetail", b =>
                {
                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CardAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("money");

                    b.Property<bool>("IsManualBill")
                        .HasColumnType("bit");

                    b.Property<decimal>("MixAmount")
                        .HasColumnType("money");

                    b.Property<int>("PayMode")
                        .HasColumnType("int");

                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("InvoiceNo");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.PointRedeemed", b =>
                {
                    b.Property<int>("PointRedeemedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("CustomerMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailySaleId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PointRedeemedId");

                    b.HasIndex("DailySaleId")
                        .IsUnique();

                    b.ToTable("PointRedeemeds");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.RegularInvoice", b =>
                {
                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsManualBill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegularInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("RoundOffAmount")
                        .HasColumnType("money");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBillAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalDiscountAmount")
                        .HasColumnType("money");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int");

                    b.Property<double>("TotalQty")
                        .HasColumnType("float");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceNo");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("RegularInvoices");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.RegularSaleItem", b =>
                {
                    b.Property<int>("RegularSaleItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BasicAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("BillAmount")
                        .HasColumnType("money");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<long?>("HSNCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("HSNCode1")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("MRP")
                        .HasColumnType("money");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int?>("SaleTaxTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("money");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("RegularSaleItemId");

                    b.HasIndex("HSNCode1");

                    b.HasIndex("InvoiceNo1");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("SaleTaxTypeId");

                    b.HasIndex("SalesmanId");

                    b.ToTable("RegularSaleItems");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EMailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfBills")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.EndOfDay", b =>
                {
                    b.Property<int>("EndOfDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.Property<decimal>("CashInHand")
                        .HasColumnType("money");

                    b.Property<DateTime>("EOD_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<int>("FM_Arrow")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("RWT")
                        .HasColumnType("int");

                    b.Property<float>("Shirting")
                        .HasColumnType("real");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<float>("Suiting")
                        .HasColumnType("real");

                    b.Property<int>("USPA")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EndOfDayId");

                    b.HasIndex("StoreId");

                    b.ToTable("EndOfDays");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Salesman", b =>
                {
                    b.Property<int>("SalesmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("SalesmanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesmanId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Salesmen");

                    b.HasData(
                        new
                        {
                            SalesmanId = 1,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Sanjeev Mishra",
                            StoreId = 1
                        },
                        new
                        {
                            SalesmanId = 2,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Mukesh Mandal",
                            StoreId = 1
                        },
                        new
                        {
                            SalesmanId = 3,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Manager",
                            StoreId = 1
                        },
                        new
                        {
                            SalesmanId = 4,
                            EntryStatus = 0,
                            IsReadOnly = false,
                            SalesmanName = "Bikash Kumar Sah",
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<string>("GSTNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfEmployees")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PanNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreManagerPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Address = "Bhagalpur Road Dumka",
                            City = "Dumka",
                            EntryStatus = 0,
                            GSTNO = "20AJHPA739P1zv",
                            IsReadOnly = false,
                            NoOfEmployees = 9,
                            OpeningDate = new DateTime(2016, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PanNo = "AJHPA7396P",
                            PhoneNo = "06434-224461",
                            PinCode = "814101",
                            Status = true,
                            StoreCode = "JH0006",
                            StoreManagerName = "Alok Kumar",
                            StoreManagerPhoneNo = "",
                            StoreName = "Aprajita Retails"
                        });
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreClose", b =>
                {
                    b.Property<int>("StoreCloseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreCloseId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreCloses");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreHoliday", b =>
                {
                    b.Property<int>("StoreHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreHolidayId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreHolidays");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreOpen", b =>
                {
                    b.Property<int>("StoreOpenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OpenningTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreOpenId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreOpens");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringBooking", b =>
                {
                    b.Property<int>("TalioringBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingSlipNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BundiPrice")
                        .HasColumnType("money");

                    b.Property<int>("BundiQty")
                        .HasColumnType("int");

                    b.Property<decimal>("CoatPrice")
                        .HasColumnType("money");

                    b.Property<int>("CoatQty")
                        .HasColumnType("int");

                    b.Property<string>("CustName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<decimal>("KurtaPrice")
                        .HasColumnType("money");

                    b.Property<int>("KurtaQty")
                        .HasColumnType("int");

                    b.Property<int>("Others")
                        .HasColumnType("int");

                    b.Property<decimal>("OthersPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("PantPrice")
                        .HasColumnType("money");

                    b.Property<int>("PantQty")
                        .HasColumnType("int");

                    b.Property<decimal>("ShirtPrice")
                        .HasColumnType("money");

                    b.Property<int>("ShirtQty")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<int>("TotalQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("TryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TalioringBookingId");

                    b.HasIndex("StoreId");

                    b.ToTable("TalioringBookings");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringDelivery", b =>
                {
                    b.Property<int>("TalioringDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntryStatus")
                        .HasColumnType("int");

                    b.Property<string>("InvNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TalioringBookingId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TalioringDeliveryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TalioringBookingId");

                    b.ToTable("TailoringDeliveries");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.FileInfo", b =>
                {
                    b.Property<Guid>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("TodoId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.ToDoMessage", b =>
                {
                    b.Property<int>("ToDoMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOver")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OverDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToDoMessageId");

                    b.ToTable("ToDoMessages");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2")
                        .HasColumnName("Added");

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DueTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueTo");

                    b.Property<Guid?>("FileTodoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FileTodoId");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eStore.Shared.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.CashPayment", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Common.TranscationMode", "Mode")
                        .WithMany()
                        .HasForeignKey("TranscationModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.CashReceipt", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Common.TranscationMode", "Mode")
                        .WithMany()
                        .HasForeignKey("TranscationModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expense", b =>
                {
                    b.HasOne("eStore.Shared.Models.Banking.BankAccount", "FromAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("eStore.Shared.Models.Payroll.Employee", "PaidBy")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Accounts.LedgerEntry", "LedgerEntry")
                        .WithMany()
                        .HasForeignKey("LedgerEntryId");

                    b.HasOne("eStore.Shared.Models.Accounts.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("LedgerEntry");

                    b.Navigation("PaidBy");

                    b.Navigation("Party");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.EBillPayment", b =>
                {
                    b.HasOne("eStore.Shared.Models.Accounts.Expenses.EletricityBill", "Bill")
                        .WithMany()
                        .HasForeignKey("EletricityBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.ElectricityConnection", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.EletricityBill", b =>
                {
                    b.HasOne("eStore.Shared.Models.Accounts.Expenses.ElectricityConnection", "Connection")
                        .WithMany()
                        .HasForeignKey("ElectricityConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.Rent", b =>
                {
                    b.HasOne("eStore.Shared.Models.Accounts.Expenses.RentedLocation", "Location")
                        .WithMany()
                        .HasForeignKey("RentedLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Expenses.RentedLocation", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.LedgerEntry", b =>
                {
                    b.HasOne("eStore.Shared.Models.Accounts.Party", "Party")
                        .WithMany("Ledgers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.LedgerMaster", b =>
                {
                    b.HasOne("eStore.Shared.Models.Accounts.LedgerType", "LedgerType")
                        .WithMany()
                        .HasForeignKey("LedgerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Accounts.Party", "Party")
                        .WithOne("LedgerMaster")
                        .HasForeignKey("eStore.Shared.Models.Accounts.LedgerMaster", "PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LedgerType");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Party", b =>
                {
                    b.HasOne("eStore.Shared.Models.Accounts.LedgerType", "LedgerType")
                        .WithMany()
                        .HasForeignKey("LedgerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LedgerType");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Payment", b =>
                {
                    b.HasOne("eStore.Shared.Models.Banking.BankAccount", "FromAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("eStore.Shared.Models.Accounts.LedgerEntry", "LedgerEntry")
                        .WithMany()
                        .HasForeignKey("LedgerEntryId");

                    b.HasOne("eStore.Shared.Models.Accounts.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("LedgerEntry");

                    b.Navigation("Party");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Receipt", b =>
                {
                    b.HasOne("eStore.Shared.Models.Banking.BankAccount", "FromAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("eStore.Shared.Models.Accounts.LedgerEntry", "LedgerEntry")
                        .WithMany()
                        .HasForeignKey("LedgerEntryId");

                    b.HasOne("eStore.Shared.Models.Accounts.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId");

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("LedgerEntry");

                    b.Navigation("Party");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Banking.BankAccount", b =>
                {
                    b.HasOne("eStore.Shared.Models.Banking.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("eStore.Shared.Models.Banking.BankTranscation", b =>
                {
                    b.HasOne("eStore.Shared.Models.Banking.BankAccount", "Account")
                        .WithMany("BankTranscations")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.CashDetail", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.CashInBank", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Common.CashInHand", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Attendance", b =>
                {
                    b.HasOne("eStore.Shared.Models.Payroll.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Employee", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.EmployeeUser", b =>
                {
                    b.HasOne("eStore.Shared.Models.Payroll.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("eStore.Shared.Models.Payroll.EmployeeUser", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.ProductItem", b =>
                {
                    b.HasOne("eStore.Shared.Models.Purchases.Brand", "BrandName")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Purchases.Category", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryCategoryId");

                    b.HasOne("eStore.Shared.Models.Purchases.Category", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryCategoryId");

                    b.HasOne("eStore.Shared.Models.Purchases.Category", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeCategoryId");

                    b.Navigation("BrandName");

                    b.Navigation("MainCategory");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.ProductPurchase", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Purchases.Supplier", "Supplier")
                        .WithMany("ProductPurchases")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.PurchaseItem", b =>
                {
                    b.HasOne("eStore.Shared.Models.Purchases.ProductItem", "ProductItem")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Purchases.ProductPurchase", "ProductPurchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Common.PurchaseTaxType", "PurchaseTaxType")
                        .WithMany()
                        .HasForeignKey("PurchaseTaxTypeId");

                    b.Navigation("ProductItem");

                    b.Navigation("ProductPurchase");

                    b.Navigation("PurchaseTaxType");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.Stock", b =>
                {
                    b.HasOne("eStore.Shared.Models.Purchases.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.CardDetail", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.PaymentDetail", "PaymentDetail")
                        .WithOne("CardDetail")
                        .HasForeignKey("eStore.Shared.Models.Sales.CardDetail", "InvoiceNo");

                    b.Navigation("PaymentDetail");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.CouponPayment", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.DailySale", "DailySale")
                        .WithOne("CouponPayment")
                        .HasForeignKey("eStore.Shared.Models.Sales.CouponPayment", "DailySaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailySale");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DailySale", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.EDCTranscation", "EDCTranscation")
                        .WithMany()
                        .HasForeignKey("EDCTranscationId");

                    b.HasOne("eStore.Shared.Models.Sales.MixAndCouponPayment", "MixAndCouponPayment")
                        .WithMany()
                        .HasForeignKey("MixAndCouponPaymentId");

                    b.HasOne("eStore.Shared.Models.Stores.Salesman", "Salesman")
                        .WithMany()
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EDCTranscation");

                    b.Navigation("MixAndCouponPayment");

                    b.Navigation("Salesman");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DueRecoverd", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.DuesList", "DuesList")
                        .WithMany("Recoverds")
                        .HasForeignKey("DuesListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DuesList");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DuesList", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.DailySale", "DailySale")
                        .WithMany()
                        .HasForeignKey("DailySaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailySale");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.EDC", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.EDCTranscation", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.EDC", "CardMachine")
                        .WithMany()
                        .HasForeignKey("EDCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardMachine");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.MixAndCouponPayment", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.MixAndCouponPayment", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeMixAndCouponPaymentId");

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mode");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.OnlineSale", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.OnlineVendor", "Vendor")
                        .WithMany("OnlineSales")
                        .HasForeignKey("OnlineVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.OnlineSaleReturn", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.OnlineSale", "OnlineSale")
                        .WithOne("SaleReturn")
                        .HasForeignKey("eStore.Shared.Models.Sales.OnlineSaleReturn", "OnlineSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineSale");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.PaymentDetail", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.RegularInvoice", "Invoice")
                        .WithOne("PaymentDetail")
                        .HasForeignKey("eStore.Shared.Models.Sales.PaymentDetail", "InvoiceNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.PointRedeemed", b =>
                {
                    b.HasOne("eStore.Shared.Models.Sales.DailySale", "DailySale")
                        .WithOne("PointRedeemed")
                        .HasForeignKey("eStore.Shared.Models.Sales.PointRedeemed", "DailySaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailySale");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.RegularInvoice", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.RegularSaleItem", b =>
                {
                    b.HasOne("eStore.Shared.Models.Purchases.HSN", "HSN")
                        .WithMany("RegularSaleItems")
                        .HasForeignKey("HSNCode1");

                    b.HasOne("eStore.Shared.Models.Sales.RegularInvoice", "Invoice")
                        .WithMany("SaleItems")
                        .HasForeignKey("InvoiceNo1");

                    b.HasOne("eStore.Shared.Models.Purchases.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Common.SaleTaxType", "SaleTaxType")
                        .WithMany()
                        .HasForeignKey("SaleTaxTypeId");

                    b.HasOne("eStore.Shared.Models.Stores.Salesman", "Salesman")
                        .WithMany()
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HSN");

                    b.Navigation("Invoice");

                    b.Navigation("ProductItem");

                    b.Navigation("Salesman");

                    b.Navigation("SaleTaxType");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.EndOfDay", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Salesman", b =>
                {
                    b.HasOne("eStore.Shared.Models.Payroll.Employee", "Employee")
                        .WithMany("Salesmen")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Store", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Company", "Company")
                        .WithMany("Stores")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreClose", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreHoliday", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.StoreOpen", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringBooking", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringDelivery", b =>
                {
                    b.HasOne("eStore.Shared.Models.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Shared.Models.Tailoring.TalioringBooking", "Booking")
                        .WithMany("Deliveries")
                        .HasForeignKey("TalioringBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eStore.Shared.Models.Todos.TodoItem", b =>
                {
                    b.HasOne("eStore.Shared.Models.Todos.FileInfo", "File")
                        .WithMany()
                        .HasForeignKey("FileTodoId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("eStore.Shared.Models.Accounts.Party", b =>
                {
                    b.Navigation("LedgerMaster");

                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("eStore.Shared.Models.Banking.BankAccount", b =>
                {
                    b.Navigation("BankTranscations");
                });

            modelBuilder.Entity("eStore.Shared.Models.Payroll.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Salesmen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.HSN", b =>
                {
                    b.Navigation("RegularSaleItems");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.ProductItem", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.ProductPurchase", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("eStore.Shared.Models.Purchases.Supplier", b =>
                {
                    b.Navigation("ProductPurchases");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DailySale", b =>
                {
                    b.Navigation("CouponPayment");

                    b.Navigation("PointRedeemed");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.DuesList", b =>
                {
                    b.Navigation("Recoverds");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.OnlineSale", b =>
                {
                    b.Navigation("SaleReturn");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.OnlineVendor", b =>
                {
                    b.Navigation("OnlineSales");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.PaymentDetail", b =>
                {
                    b.Navigation("CardDetail");
                });

            modelBuilder.Entity("eStore.Shared.Models.Sales.RegularInvoice", b =>
                {
                    b.Navigation("PaymentDetail");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Company", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("eStore.Shared.Models.Stores.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("eStore.Shared.Models.Tailoring.TalioringBooking", b =>
                {
                    b.Navigation("Deliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
