excel to jsn
import React, { useState } from "react";
import "./App.css";
import * as XLSX from "xlsx";

class ExcelToJson extends React.Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
    this.state = {
      file: "",
    };
  }

  handleClick(e) {
    this.refs.fileUploader.click();
  }

  filePathset(e) {
    e.stopPropagation();
    e.preventDefault();
    var file = e.target.files[0];
    console.log(file);
    this.setState({ file });

    console.log(this.state.file);
  }

  readFile() {
    var f = this.state.file;
    var name = f.name;
    const reader = new FileReader();
    reader.onload = (evt) => {
      // evt = on_file_select event
      /* Parse data */
      const bstr = evt.target.result;
      const wb = XLSX.read(bstr, { type: "binary" });
      /* Get first worksheet */
      const wsname = wb.SheetNames[0];
      const ws = wb.Sheets[wsname];
      /* Convert array of arrays */
      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });
      /* Update state */
      console.log("Data>>>" + data);// shows that excel data is read
      console.log(this.convertToJson(data)); // shows data in json format
    };
    reader.readAsBinaryString(f);
  }

  convertToJson(csv) {
    var lines = csv.split("\n");

    var result = [];

    var headers = lines[0].split(",");

    for (var i = 1; i < lines.length; i++) {
      var obj = {};
      var currentline = lines[i].split(",");

      for (var j = 0; j < headers.length; j++) {
        obj[headers[j]] = currentline[j];
      }

      result.push(obj);
    }

    //return result; //JavaScript object
    return JSON.stringify(result); //JSON
  }

  render() {
    return (
      <div>
        <input
          type="file"
          id="file"
          ref="fileUploader"
          onChange={this.filePathset.bind(this)}
        />
        <button
          onClick={() => {
            this.readFile();
          }}
        >
          Read File
        </button>
      </div>
    );
  }
}

export default ExcelToJson;


//end of code

//Start of code
const handleUpload = (e) => {
    e.preventDefault();

    var files = e.target.files, f = files[0];
    var reader = new FileReader();
    reader.onload = function (e) {
        var data = e.target.result;
        let readedData = XLSX.read(data, {type: 'binary'});
        const wsname = readedData.SheetNames[0];
        const ws = readedData.Sheets[wsname];

        /* Convert array to json*/
        const dataParse = XLSX.utils.sheet_to_json(ws, {header:1});
        setFileUploaded(dataParse);
    };
    reader.readAsBinaryString(f)
}

//end of Code

//start of code
import React, {useCallback, useState} from 'react';
    import {useDropzone} from 'react-dropzone'  // use hooks 
    import Dropzone from 'react-dropzone'  
    import XLSX from 'xlsx' 
    //import logo1 from './logo.svg';    // original 
    import logo2 from './images/ShedMadeOfWood_small.jpg';  // demo logo 
    import './App.css'; 
    
    
    function App() {
      // Edit <code>src/App.js</code> and save to reload.
      // const [files, setFiles] = useState([])
      const currDateTime1 = new Date().toISOString()
      console.warn(currDateTime1 + " Starting React/App: function App()")
      const onDrop = useCallback(acceptedFiles => {
        // Do something with the files 
        const currDateTime2 = new Date().toISOString()
        console.log(currDateTime2 + " trying to read file")
        acceptedFiles.forEach((file) => {
          const reader = new FileReader() 
          reader.onabort = () => console.log('file reading was aborted')
          reader.onerror = () => console.log('file reading has failed')
          reader.onload = (data) => {
               // Do what you want with the file contents 
               //console.log("file size:", data.length);
               //const binaryStr = reader.result 
               //const fileContents = reader.readAsText
               const fileContents = data.target.result 
               const currDateTime3 = new Date().toISOString()
               console.log(currDateTime3 + " Text print of file contents:")
               // console.log(fileContents)
    
               // This fetch worked for CSV file      
                   
                   fetch('http://localhost:3001/api/filedata', {
                      method: 'POST',
                      headers: {
                         'Accept': 'application/json',
                         'Content-Type': 'application/json'
                      },
                      // TODO - could add userid, datetime here, filename, etc...  
                      body: JSON.stringify({
                         "fileContents": fileContents
                         //, secondParam: 'yourOtherValue',
                      })
                    })
                    
                    // another example passed formData to the body: https://stackoverflow.com/questions/41025078/react-dropzone-how-to-upload-image
                    /* 
                    fetch('http://localhost:3001/api/filedatabinary', {
                      method: 'POST',
                      body: fileContents
                      })
                    */
        
        
                }
              reader.readAsText(file)
              //reader.readAsBinaryString(file)
             
            })
          }, [])
          const {getRootProps, getInputProps, isDragActive} = useDropzone ({onDrop}) 
          const [fileNames, setFileNames] = useState([]);
          const handleDrop = acceptedFiles =>
            setFileNames(acceptedFiles.map(file => file.name));
        
          return (
            <div align="center">
              <div className="App" {...getRootProps()}>
                <header className="App-header">
                  <img src={logo2} className="App-logo" alt="logo" />
                </header>
                <h4>CSV Files here</h4>
                <input {...getInputProps()} />
                {
                  isDragActive ? 
                    <p>Drop the files here ...</p> : 
                    <div>
                      <p>Drag and Drop a csv file here,<br />
                      or click to select files.</p>
                    </div>
                }
              </div>
              <h4>Drop Excel Files Here</h4>
              <Dropzone onDrop={handleDrop}>
                {({ getRootProps, getInputProps }) => (
                  <div {...getRootProps({ className: "dropzone" })}>
                    <input {...getInputProps()} />
                    <p>Drag and drop Excel files, or click to select files</p>
                  </div>
                )}
              </Dropzone>
              <div>
                <strong>Excel File(s):</strong>
                <ul>
                  {fileNames.map(fileName => (
                    <li key={fileName}>{fileName}</li>
                  ))}
                </ul>
              </div>
              <hr />
                <br /><br />
                Thanks for using our company!
            </div>
            
              );
        }
        
        export default App;

//end of code

 